version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: zenvoyer-postgres
    environment:
      POSTGRES_USER: ${DATABASE_USER:-zenvoyer}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-zenvoyer_password_123}
      POSTGRES_DB: ${DATABASE_NAME:-zenvoyer_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - zenvoyer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-zenvoyer}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: zenvoyer-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:- }
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - zenvoyer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # pgAdmin - PostgreSQL Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: zenvoyer-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@zenvoyer.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      SCRIPT_NAME: /pgadmin
    ports:
      - "5050:80"
    networks:
      - zenvoyer-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis Commander - Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: zenvoyer-redis-commander
    environment:
      REDIS_HOSTS: local:${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "8081:8081"
    networks:
      - zenvoyer-network
    depends_on:
      - redis
    restart: unless-stopped

  # Mailhog - Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: zenvoyer-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - zenvoyer-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  zenvoyer-network:
    driver: bridge
